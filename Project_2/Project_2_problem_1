''' '''

import numpy as np
import scipy.linalg
import matplotlib.pyplot as plt
from Project_2 import *

plot = True

# Set the number of significant digits
np.set_printoptions(precision=15, suppress=True)

# Set the order of the polynomial
order = 2

# Write the data points in appropriate arrays
points = np.array([8,10,12,16,20,30,40,60,100])
b = np.array([0.88,1.22,1.64,2.72,3.96,7.66,11.96,21.56,43.16])

# Build the Vandermonde matrix
A = compute_A(points, order)

# Obtain the solution of the minimization problem
x_chol = Least_Square_Cholesky(A, b)
x_qr = Least_Square_QR(A, b)

print(f'x_Cholesky = {format(x_chol)}')
print(f'x_QR = {format(x_qr)}')	

if plot == True:
    # Set size parameters for the plots
    tickparams_size = 16
    xylabel_size = 20
    suptitle_size = 35
    title_size = 22
    legend_size = 18

    # Set the range of x
    x_start = 0.9 * min(points)
    x_stop = 1.1 * max(points)
    x = np.linspace(x_start, x_stop, 1000)

    # Compute the two fit functions
    y_chol = x_chol[0] + x_chol[1] * x + x_chol[2] * x**2
    y_qr = x_qr[0] + x_qr[1] * x + x_qr[2] * x**2

    # Plot the data and the fit functions
    fig, ax = plt.subplots()
    ax.plot(x, y_chol, label='Fit Cholesky', color='green')  
    ax.plot(x, y_qr, label='Fit QR',color='blue') 
    ax.scatter(points, b, marker='o', color='red', label='Data')    
    ax.set_title('Fit and data', fontsize = title_size)
    ax.tick_params(labelsize = tickparams_size)
    ax.set_xlabel('x', fontsize = xylabel_size)
    ax.set_ylabel('y', fontsize = xylabel_size)
    ax.legend(fontsize = legend_size)
    plt.show()

# Compute A^{T}, C, and d
A_transpose = np.transpose(A)
C = A_transpose@A
d = A_transpose@b

# Consider the approximate solution
approx_solution = np.array([-1.919,0.2782,0.001739])

# Compute the residual
residual = d - C @ approx_solution
residual_norm_2 = np.linalg.norm(residual, ord=2)
print(f'Residual = {format(residual)}')
print(f'Norm 2 of the residual = {format(residual_norm_2)}')

# Compute the spectral condition number of C
singular_values = np.linalg.svd(C, compute_uv=False)
spectral_condition_num = max(singular_values)/min(singular_values)
print(f'Spectral condition number of C: x = {format(spectral_condition_num)}')

# Compute the relative error
relative_error = np.linalg.norm(x_qr - approx_solution, ord=2)/np.linalg.norm(x_qr, ord=2)
print(f'Relative error: x = {format(relative_error)}')

# Compute bounds to residual
d_norm = np.linalg.norm(np.transpose(A)@b, ord=2)
lower_bound = d_norm * relative_error / spectral_condition_num
upper_bound = d_norm * relative_error * spectral_condition_num
print(f'Lower bound to residual: {lower_bound}')
print(f'Upper bound to residual: {upper_bound}')

